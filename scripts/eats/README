                Entity Management in SDO


      Overview

All of the entities stored in EATS, with only sufficient information
to disambiguate. Additional profile information is kept in XML files,
named according to their EATS authority record ID. Information about
the references to this entity in the collection is stored in a Solr
index.

When a request is made for an entity page, the information from these
three sources is merged. The EATS information is not retrieved from
EATS on each request, however. Instead it is taken from an index file
(necessary for the profile indices) that is cached for a goodly
time. This index is a transformed EATSML dump.


      Creating initial set of EATS entities

There exists already much information about entities that needs to be
automatically put into EATS (since to do so by hand would be a lot of
repetitious work). Happily the information from the profile files has
been put into Excel spreadsheets by Ian, supplemented by additional
information, so these spreadsheets serve as the sole source of data
for the creation of entities in EATS.

The Python script create_entities_from_csv.py creates EATS entities
from the data in a CSV file generated from one of these
spreadsheets. It also renames the profile files to the EATS key, and
changes the root xml:id to the same.


      Keying the XML

The source document XML files have some names already marked up as
names. These need to be keyed, based off the name given in a comment
either within or immediately following the name element.

The Python script key_entities.py performs this keying task, looking
up the commented name in EATS and keying the name element if there is
one and only one match found.

This script should be run after the entities have been created in EATS
from the CSV files.


      Notes

Both scripts use the EATSML Python library that is part of
EATS. Symlink or copy client/python/banquet/eatsml (from an EATS SVN
working copy) to this directory to make its contents available.


      To do

 * Add creation of entity relationships to
   create_entities_from_csv.py. A couple of the files relate two
   entities (works by, works edited by), and it would be good to do
   this automatically. However, this requires that the person exist in
   EATS (so the person CSV must be the first processed), and the
   column data is not simply a name, it may end in ", ed.", for
   example, so it will need to be parsed.

 * The works have italics at non-machine-determinable places, and
   these need to be captured in EATS. Italics aren't captured in the
   CSV, so they will need to be added by IB after they are in EATS,
   unfortunately. EATS has no mechanism for marking text, so an ad hoc
   system will need to be used. Since punctuation does not impinge on
   EATS' search, and only italics are needed here, perhaps a scheme
   like "non-italic text <italic text> non-italic text" would work -
   the display outside of EATS just needs to convert the < to <i> and
   > to </i> (or whatever). Within EATS, it will just display as
   literal characters - that shouldn't be a big problem.
