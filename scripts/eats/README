                Entity Management in SDO


      Overview

All of the entities stored in EATS, with only sufficient information
to disambiguate. Additional profile information is kept in XML files,
named according to their EATS authority record ID. Information about
the references to this entity in the collection is stored in a Solr
index.

When a request is made for an entity page, the information from these
three sources is merged. The EATS information is not retrieved from
EATS on each request, however. Instead it is taken from an index file
(necessary for the profile indices) that is cached for a goodly
time. This index is a transformed EATSML dump.


      Creating initial set of EATS entities

There exists already much information about entities that needs to be
automatically put into EATS (since to do so by hand would be a lot of
repetitious work). Happily the information from the profile files has
been put into Excel spreadsheets by Ian, supplemented by additional
information, so these spreadsheets serve as the sole source of data
for the creation of entities in EATS.

(The exceptions here are places and organisations, which have profiles
but no authority list. The Python script generate-csv-from-profiles.py
generates CSV files from profiles.)

The Python script create_entities_from_csv.py creates EATS entities
from the data in a CSV file generated from one of these
spreadsheets. It also renames the profile files to the EATS key, and
changes the root xml:id to the same.

The whole process can be run using the import-entities.sh shell
script, which takes no arguments; just run it from this directory and
it will do all the work. The profile files will have been renamed via
Subversion and need to be committed once it is clear that the data in
EATS is good.


      Keying the XML

The source document XML files have some names already marked up as
names. These need to be keyed, based off the name given in a comment
either within or immediately following the name element, or from an n
attribute giving the spreadsheet id (for compositions and terms).

The Python script key_entities.py performs this keying task, looking
up the commented name in EATS and keying the name element if there is
one and only one match found.

This script should be run after the entities have been created in EATS
from the CSV files. It can be run as many times as desired, and can be
run after new entities have been added to EATS, since it does not
create anything in EATS, but only keys names that do not have keys.

Run this script over all of the XML files in
xmod/webapp/root/xml/content/documents/ and its subdirectories.


      Notes

Both of the Python scripts use the EATSML Python library that is part
of EATS. Symlink or copy client/python/banquet/eatsml (from an EATS
SVN working copy) to this directory to make its contents available.

In the case of musical terms and musical compositions, the EATS entity
created has a name of type "list id" which is the spreadsheets
ID. This is necessary because those entities are marked up in the TEI
(and Word documents that will be the basis of future TEI documents)
with an n attribute specifying this ID. The key_entities.py script
handles these entities (and removes the n attribute when an entity is
keyed).

      Configuring for use on the server

 * import-entities.sh will need to have the paths changed to point to
   the correct xMod profiles locations.

 * key_entities.py and create-entities-from-csv.py will need to have
   the EATS server details changed to point to sdo-data. This includes
   adding "http_username" and "http_password" parameters to the
   creation of the dispatcher object.

      To do

 * One of the works by J. S. Bach was specified in the spreadsheet as
   arranged by Busoni. I did not implement anything to handle this, so
   that information was lost. If it is important, an "is arranged by"
   relationship type can be added, and the person Busoni (if he
   doesn't already exist), and the relationship.

 * The English names of a term are not related to the German name as
   being a translation. If necessary, a name relationship type can be
   added along with the name relationships.

 * The works have italics at non-machine-determinable places, and
   these need to be captured in EATS. Italics aren't captured in the
   CSV, so they will need to be added by IB after they are in EATS,
   unfortunately. EATS has no mechanism for marking text, so an ad hoc
   system will need to be used. Since punctuation does not impinge on
   EATS' search, and only italics are needed here, perhaps a scheme
   like "non-italic text <italic text> non-italic text" would work -
   the display outside of EATS just needs to convert the < to <i> and
   > to </i> (or whatever). Within EATS, it will just display as
   literal characters - that shouldn't be a big problem.
